#include<iostream>
#include<algorithm>
#include<unordered_map>
using namespace std;
class Edge{
    public:
	int start;
	int dest;
	int weight;
};
bool compare(Edge edge1,Edge edge2){
	return edge1.weight<edge2.weight;
}
void kruskalsmst(Edge *edges,int*vertices,int n,int e){
	sort(edges,edges+e,compare);
	//int *parent=new Edge[n];
	unordered_map<int,int> parent;
	for(int i=0;i<n;i++){
		parent[vertices[i]]=vertices[i];
	}
	int count=0;
	int i=0;
	Edge*final=new Edge[n-1];
	while(count!=n-1){
		if(parent[edges[i].start]==parent[edges[i].dest]){
			i++;
			break;
		}
		else{
			if(parent[edges[i].start]==edges[i].start){
				parent[edges[i].start]=edges[i].dest;
				parent[edges[i].dest]=edges[i].dest;
			}
			else{
				parent[edges[i].start]=edges[i].start;
				parent[edges[i].dest]=edges[i].start;
			}
			final[i]=edges[i];
			count++;
			i++;
		}
	}
	for(int j=0;j<n-1;j++){
		cout<<final[j].start<<"->"<<final[j].dest<<" "<<final[j].weight<<"(weight)"<<endl;
	}
	return;
}
int main(){
	int n,e;
	cout<<"enter the no of vertices: ";
	cin>>n;
	cout<<"enter the no of edges   : ";
	cin>>e;
	int* vertices=new int[n];
	cout<<"enter the vertices: ";
	for(int i=0;i<n;i++)
	cin>>vertices[i];
	Edge * edges=new Edge[e];
	cout<<"enter the edges: ";
	for(int i=0;i<e;i++){
		int u,v;
		int w;
		cout<<"enter edge start, dest and weight: ";
		cin>>u>>v>>w;
		Edge temp;
		temp.start=u;
		temp.dest=v;
		temp.weight=w;
		edges[i]=temp;
	}
	kruskalsmst(edges,vertices,n,e);
	return 0;
}
